// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nikitads9/banner-service-api/internal/app/repository/banner (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	jx "github.com/go-faster/jx"
	gomock "github.com/golang/mock/gomock"
	model "github.com/nikitads9/banner-service-api/internal/app/model"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateBanner mocks base method.
func (m *MockRepository) CreateBanner(arg0 context.Context, arg1 *model.Banner) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBanner", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBanner indicates an expected call of CreateBanner.
func (mr *MockRepositoryMockRecorder) CreateBanner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBanner", reflect.TypeOf((*MockRepository)(nil).CreateBanner), arg0, arg1)
}

// DeleteBanner mocks base method.
func (m *MockRepository) DeleteBanner(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBanner", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBanner indicates an expected call of DeleteBanner.
func (mr *MockRepositoryMockRecorder) DeleteBanner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBanner", reflect.TypeOf((*MockRepository)(nil).DeleteBanner), arg0, arg1)
}

// GetBanner mocks base method.
func (m *MockRepository) GetBanner(arg0 context.Context, arg1, arg2 int64) (jx.Raw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBanner", arg0, arg1, arg2)
	ret0, _ := ret[0].(jx.Raw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBanner indicates an expected call of GetBanner.
func (mr *MockRepositoryMockRecorder) GetBanner(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBanner", reflect.TypeOf((*MockRepository)(nil).GetBanner), arg0, arg1, arg2)
}

// GetBanners mocks base method.
func (m *MockRepository) GetBanners(arg0 context.Context, arg1 *model.GetBannersParams) ([]*model.BannerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBanners", arg0, arg1)
	ret0, _ := ret[0].([]*model.BannerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBanners indicates an expected call of GetBanners.
func (mr *MockRepositoryMockRecorder) GetBanners(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBanners", reflect.TypeOf((*MockRepository)(nil).GetBanners), arg0, arg1)
}

// SetBanner mocks base method.
func (m *MockRepository) SetBanner(arg0 context.Context, arg1 *model.SetBannerInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBanner", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBanner indicates an expected call of SetBanner.
func (mr *MockRepositoryMockRecorder) SetBanner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBanner", reflect.TypeOf((*MockRepository)(nil).SetBanner), arg0, arg1)
}
