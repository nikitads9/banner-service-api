// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"strings"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/ogenerrors"
)

// SecurityHandler is handler for security parameters.
type SecurityHandler interface {
	// HandleBearer handles Bearer security.
	// Токен админа с префиксом `Bearer`, пр. "Bearer
	// eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MTk5ODYyMzUsInNjb3BlIjoiYWRtaW4ifQ.
	// cev1h-ivEbwx3UJDYOoWIAid-gSRuPh5RObOkkuOY2g" и пр. "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
	// eyJleHAiOjE3MTk5ODYyMzUsInNjb3BlIjoidXNlciJ9.vmt-FrTKksPPLAnzvXzj3R7lLcVe06xAEi5s_2NLRVI.
	HandleBearer(ctx context.Context, operationName string, t Bearer) (context.Context, error)
}

func findAuthorization(h http.Header, prefix string) (string, bool) {
	v, ok := h["Authorization"]
	if !ok {
		return "", false
	}
	for _, vv := range v {
		scheme, value, ok := strings.Cut(vv, " ")
		if !ok || !strings.EqualFold(scheme, prefix) {
			continue
		}
		return value, true
	}
	return "", false
}

func (s *Server) securityBearer(ctx context.Context, operationName string, req *http.Request) (context.Context, bool, error) {
	var t Bearer
	const parameterName = "Token"
	value := req.Header.Get(parameterName)
	if value == "" {
		return ctx, false, nil
	}
	t.APIKey = value
	rctx, err := s.sec.HandleBearer(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}

// SecuritySource is provider of security values (tokens, passwords, etc.).
type SecuritySource interface {
	// Bearer provides Bearer security value.
	// Токен админа с префиксом `Bearer`, пр. "Bearer
	// eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MTk5ODYyMzUsInNjb3BlIjoiYWRtaW4ifQ.
	// cev1h-ivEbwx3UJDYOoWIAid-gSRuPh5RObOkkuOY2g" и пр. "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
	// eyJleHAiOjE3MTk5ODYyMzUsInNjb3BlIjoidXNlciJ9.vmt-FrTKksPPLAnzvXzj3R7lLcVe06xAEi5s_2NLRVI.
	Bearer(ctx context.Context, operationName string) (Bearer, error)
}

func (s *Client) securityBearer(ctx context.Context, operationName string, req *http.Request) error {
	t, err := s.sec.Bearer(ctx, operationName)
	if err != nil {
		return errors.Wrap(err, "security source \"Bearer\"")
	}
	req.Header.Set("Token", t.APIKey)
	return nil
}
