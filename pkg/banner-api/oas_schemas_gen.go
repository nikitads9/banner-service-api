// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"

	"github.com/go-faster/jx"
)

type AdminToken struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *AdminToken) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *AdminToken) SetAPIKey(val string) {
	s.APIKey = val
}

// BannerGetForbidden is response for BannerGet operation.
type BannerGetForbidden struct{}

func (*BannerGetForbidden) bannerGetRes() {}

type BannerGetInternalServerError struct {
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *BannerGetInternalServerError) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *BannerGetInternalServerError) SetError(val OptString) {
	s.Error = val
}

func (*BannerGetInternalServerError) bannerGetRes() {}

type BannerGetOKApplicationJSON []BannerGetOKItem

func (*BannerGetOKApplicationJSON) bannerGetRes() {}

type BannerGetOKItem struct {
	// Идентификатор баннера.
	BannerID OptInt `json:"banner_id"`
	// Идентификаторы тэгов.
	TagIds []int `json:"tag_ids"`
	// Идентификатор фичи.
	FeatureID OptInt `json:"feature_id"`
	// Содержимое баннера.
	Content OptBannerGetOKItemContent `json:"content"`
	// Флаг активности баннера.
	IsActive OptBool `json:"is_active"`
	// Дата создания баннера.
	CreatedAt OptDateTime `json:"created_at"`
	// Дата обновления баннера.
	UpdatedAt OptDateTime `json:"updated_at"`
}

// GetBannerID returns the value of BannerID.
func (s *BannerGetOKItem) GetBannerID() OptInt {
	return s.BannerID
}

// GetTagIds returns the value of TagIds.
func (s *BannerGetOKItem) GetTagIds() []int {
	return s.TagIds
}

// GetFeatureID returns the value of FeatureID.
func (s *BannerGetOKItem) GetFeatureID() OptInt {
	return s.FeatureID
}

// GetContent returns the value of Content.
func (s *BannerGetOKItem) GetContent() OptBannerGetOKItemContent {
	return s.Content
}

// GetIsActive returns the value of IsActive.
func (s *BannerGetOKItem) GetIsActive() OptBool {
	return s.IsActive
}

// GetCreatedAt returns the value of CreatedAt.
func (s *BannerGetOKItem) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *BannerGetOKItem) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetBannerID sets the value of BannerID.
func (s *BannerGetOKItem) SetBannerID(val OptInt) {
	s.BannerID = val
}

// SetTagIds sets the value of TagIds.
func (s *BannerGetOKItem) SetTagIds(val []int) {
	s.TagIds = val
}

// SetFeatureID sets the value of FeatureID.
func (s *BannerGetOKItem) SetFeatureID(val OptInt) {
	s.FeatureID = val
}

// SetContent sets the value of Content.
func (s *BannerGetOKItem) SetContent(val OptBannerGetOKItemContent) {
	s.Content = val
}

// SetIsActive sets the value of IsActive.
func (s *BannerGetOKItem) SetIsActive(val OptBool) {
	s.IsActive = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *BannerGetOKItem) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *BannerGetOKItem) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Содержимое баннера.
type BannerGetOKItemContent map[string]jx.Raw

func (s *BannerGetOKItemContent) init() BannerGetOKItemContent {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// BannerGetUnauthorized is response for BannerGet operation.
type BannerGetUnauthorized struct{}

func (*BannerGetUnauthorized) bannerGetRes() {}

type BannerIDDeleteBadRequest struct {
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *BannerIDDeleteBadRequest) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *BannerIDDeleteBadRequest) SetError(val OptString) {
	s.Error = val
}

func (*BannerIDDeleteBadRequest) bannerIDDeleteRes() {}

// BannerIDDeleteForbidden is response for BannerIDDelete operation.
type BannerIDDeleteForbidden struct{}

func (*BannerIDDeleteForbidden) bannerIDDeleteRes() {}

type BannerIDDeleteInternalServerError struct {
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *BannerIDDeleteInternalServerError) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *BannerIDDeleteInternalServerError) SetError(val OptString) {
	s.Error = val
}

func (*BannerIDDeleteInternalServerError) bannerIDDeleteRes() {}

// BannerIDDeleteNoContent is response for BannerIDDelete operation.
type BannerIDDeleteNoContent struct{}

func (*BannerIDDeleteNoContent) bannerIDDeleteRes() {}

// BannerIDDeleteNotFound is response for BannerIDDelete operation.
type BannerIDDeleteNotFound struct{}

func (*BannerIDDeleteNotFound) bannerIDDeleteRes() {}

// BannerIDDeleteUnauthorized is response for BannerIDDelete operation.
type BannerIDDeleteUnauthorized struct{}

func (*BannerIDDeleteUnauthorized) bannerIDDeleteRes() {}

type BannerIDPatchBadRequest struct {
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *BannerIDPatchBadRequest) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *BannerIDPatchBadRequest) SetError(val OptString) {
	s.Error = val
}

func (*BannerIDPatchBadRequest) bannerIDPatchRes() {}

// BannerIDPatchForbidden is response for BannerIDPatch operation.
type BannerIDPatchForbidden struct{}

func (*BannerIDPatchForbidden) bannerIDPatchRes() {}

type BannerIDPatchInternalServerError struct {
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *BannerIDPatchInternalServerError) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *BannerIDPatchInternalServerError) SetError(val OptString) {
	s.Error = val
}

func (*BannerIDPatchInternalServerError) bannerIDPatchRes() {}

// BannerIDPatchNotFound is response for BannerIDPatch operation.
type BannerIDPatchNotFound struct{}

func (*BannerIDPatchNotFound) bannerIDPatchRes() {}

// BannerIDPatchOK is response for BannerIDPatch operation.
type BannerIDPatchOK struct{}

func (*BannerIDPatchOK) bannerIDPatchRes() {}

type BannerIDPatchReq struct {
	// Идентификаторы тэгов.
	TagIds OptNilIntArray `json:"tag_ids"`
	// Идентификатор фичи.
	FeatureID OptNilInt `json:"feature_id"`
	// Содержимое баннера.
	Content OptNilBannerIDPatchReqContent `json:"content"`
	// Флаг активности баннера.
	IsActive OptNilBool `json:"is_active"`
}

// GetTagIds returns the value of TagIds.
func (s *BannerIDPatchReq) GetTagIds() OptNilIntArray {
	return s.TagIds
}

// GetFeatureID returns the value of FeatureID.
func (s *BannerIDPatchReq) GetFeatureID() OptNilInt {
	return s.FeatureID
}

// GetContent returns the value of Content.
func (s *BannerIDPatchReq) GetContent() OptNilBannerIDPatchReqContent {
	return s.Content
}

// GetIsActive returns the value of IsActive.
func (s *BannerIDPatchReq) GetIsActive() OptNilBool {
	return s.IsActive
}

// SetTagIds sets the value of TagIds.
func (s *BannerIDPatchReq) SetTagIds(val OptNilIntArray) {
	s.TagIds = val
}

// SetFeatureID sets the value of FeatureID.
func (s *BannerIDPatchReq) SetFeatureID(val OptNilInt) {
	s.FeatureID = val
}

// SetContent sets the value of Content.
func (s *BannerIDPatchReq) SetContent(val OptNilBannerIDPatchReqContent) {
	s.Content = val
}

// SetIsActive sets the value of IsActive.
func (s *BannerIDPatchReq) SetIsActive(val OptNilBool) {
	s.IsActive = val
}

// Содержимое баннера.
type BannerIDPatchReqContent map[string]jx.Raw

func (s *BannerIDPatchReqContent) init() BannerIDPatchReqContent {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// BannerIDPatchUnauthorized is response for BannerIDPatch operation.
type BannerIDPatchUnauthorized struct{}

func (*BannerIDPatchUnauthorized) bannerIDPatchRes() {}

type BannerPostBadRequest struct {
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *BannerPostBadRequest) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *BannerPostBadRequest) SetError(val OptString) {
	s.Error = val
}

func (*BannerPostBadRequest) bannerPostRes() {}

type BannerPostCreated struct {
	// Идентификатор созданного баннера.
	BannerID OptInt `json:"banner_id"`
}

// GetBannerID returns the value of BannerID.
func (s *BannerPostCreated) GetBannerID() OptInt {
	return s.BannerID
}

// SetBannerID sets the value of BannerID.
func (s *BannerPostCreated) SetBannerID(val OptInt) {
	s.BannerID = val
}

func (*BannerPostCreated) bannerPostRes() {}

// BannerPostForbidden is response for BannerPost operation.
type BannerPostForbidden struct{}

func (*BannerPostForbidden) bannerPostRes() {}

type BannerPostInternalServerError struct {
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *BannerPostInternalServerError) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *BannerPostInternalServerError) SetError(val OptString) {
	s.Error = val
}

func (*BannerPostInternalServerError) bannerPostRes() {}

type BannerPostReq struct {
	// Идентификаторы тэгов.
	TagIds []int `json:"tag_ids"`
	// Идентификатор фичи.
	FeatureID OptInt `json:"feature_id"`
	// Содержимое баннера.
	Content OptBannerPostReqContent `json:"content"`
	// Флаг активности баннера.
	IsActive OptBool `json:"is_active"`
}

// GetTagIds returns the value of TagIds.
func (s *BannerPostReq) GetTagIds() []int {
	return s.TagIds
}

// GetFeatureID returns the value of FeatureID.
func (s *BannerPostReq) GetFeatureID() OptInt {
	return s.FeatureID
}

// GetContent returns the value of Content.
func (s *BannerPostReq) GetContent() OptBannerPostReqContent {
	return s.Content
}

// GetIsActive returns the value of IsActive.
func (s *BannerPostReq) GetIsActive() OptBool {
	return s.IsActive
}

// SetTagIds sets the value of TagIds.
func (s *BannerPostReq) SetTagIds(val []int) {
	s.TagIds = val
}

// SetFeatureID sets the value of FeatureID.
func (s *BannerPostReq) SetFeatureID(val OptInt) {
	s.FeatureID = val
}

// SetContent sets the value of Content.
func (s *BannerPostReq) SetContent(val OptBannerPostReqContent) {
	s.Content = val
}

// SetIsActive sets the value of IsActive.
func (s *BannerPostReq) SetIsActive(val OptBool) {
	s.IsActive = val
}

// Содержимое баннера.
type BannerPostReqContent map[string]jx.Raw

func (s *BannerPostReqContent) init() BannerPostReqContent {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// BannerPostUnauthorized is response for BannerPost operation.
type BannerPostUnauthorized struct{}

func (*BannerPostUnauthorized) bannerPostRes() {}

// NewOptBannerGetOKItemContent returns new OptBannerGetOKItemContent with value set to v.
func NewOptBannerGetOKItemContent(v BannerGetOKItemContent) OptBannerGetOKItemContent {
	return OptBannerGetOKItemContent{
		Value: v,
		Set:   true,
	}
}

// OptBannerGetOKItemContent is optional BannerGetOKItemContent.
type OptBannerGetOKItemContent struct {
	Value BannerGetOKItemContent
	Set   bool
}

// IsSet returns true if OptBannerGetOKItemContent was set.
func (o OptBannerGetOKItemContent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBannerGetOKItemContent) Reset() {
	var v BannerGetOKItemContent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBannerGetOKItemContent) SetTo(v BannerGetOKItemContent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBannerGetOKItemContent) Get() (v BannerGetOKItemContent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBannerGetOKItemContent) Or(d BannerGetOKItemContent) BannerGetOKItemContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBannerPostReqContent returns new OptBannerPostReqContent with value set to v.
func NewOptBannerPostReqContent(v BannerPostReqContent) OptBannerPostReqContent {
	return OptBannerPostReqContent{
		Value: v,
		Set:   true,
	}
}

// OptBannerPostReqContent is optional BannerPostReqContent.
type OptBannerPostReqContent struct {
	Value BannerPostReqContent
	Set   bool
}

// IsSet returns true if OptBannerPostReqContent was set.
func (o OptBannerPostReqContent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBannerPostReqContent) Reset() {
	var v BannerPostReqContent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBannerPostReqContent) SetTo(v BannerPostReqContent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBannerPostReqContent) Get() (v BannerPostReqContent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBannerPostReqContent) Or(d BannerPostReqContent) BannerPostReqContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilBannerIDPatchReqContent returns new OptNilBannerIDPatchReqContent with value set to v.
func NewOptNilBannerIDPatchReqContent(v BannerIDPatchReqContent) OptNilBannerIDPatchReqContent {
	return OptNilBannerIDPatchReqContent{
		Value: v,
		Set:   true,
	}
}

// OptNilBannerIDPatchReqContent is optional nullable BannerIDPatchReqContent.
type OptNilBannerIDPatchReqContent struct {
	Value BannerIDPatchReqContent
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilBannerIDPatchReqContent was set.
func (o OptNilBannerIDPatchReqContent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilBannerIDPatchReqContent) Reset() {
	var v BannerIDPatchReqContent
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilBannerIDPatchReqContent) SetTo(v BannerIDPatchReqContent) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilBannerIDPatchReqContent) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilBannerIDPatchReqContent) SetToNull() {
	o.Set = true
	o.Null = true
	var v BannerIDPatchReqContent
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilBannerIDPatchReqContent) Get() (v BannerIDPatchReqContent, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilBannerIDPatchReqContent) Or(d BannerIDPatchReqContent) BannerIDPatchReqContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilBool returns new OptNilBool with value set to v.
func NewOptNilBool(v bool) OptNilBool {
	return OptNilBool{
		Value: v,
		Set:   true,
	}
}

// OptNilBool is optional nullable bool.
type OptNilBool struct {
	Value bool
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilBool was set.
func (o OptNilBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilBool) SetTo(v bool) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilBool) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilBool) SetToNull() {
	o.Set = true
	o.Null = true
	var v bool
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilBool) Get() (v bool, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt returns new OptNilInt with value set to v.
func NewOptNilInt(v int) OptNilInt {
	return OptNilInt{
		Value: v,
		Set:   true,
	}
}

// OptNilInt is optional nullable int.
type OptNilInt struct {
	Value int
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt was set.
func (o OptNilInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt) SetTo(v int) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInt) SetToNull() {
	o.Set = true
	o.Null = true
	var v int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilIntArray returns new OptNilIntArray with value set to v.
func NewOptNilIntArray(v []int) OptNilIntArray {
	return OptNilIntArray{
		Value: v,
		Set:   true,
	}
}

// OptNilIntArray is optional nullable []int.
type OptNilIntArray struct {
	Value []int
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilIntArray was set.
func (o OptNilIntArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilIntArray) Reset() {
	var v []int
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilIntArray) SetTo(v []int) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilIntArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilIntArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilIntArray) Get() (v []int, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilIntArray) Or(d []int) []int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type UserBannerGetBadRequest struct {
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *UserBannerGetBadRequest) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *UserBannerGetBadRequest) SetError(val OptString) {
	s.Error = val
}

func (*UserBannerGetBadRequest) userBannerGetRes() {}

// UserBannerGetForbidden is response for UserBannerGet operation.
type UserBannerGetForbidden struct{}

func (*UserBannerGetForbidden) userBannerGetRes() {}

type UserBannerGetInternalServerError struct {
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *UserBannerGetInternalServerError) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *UserBannerGetInternalServerError) SetError(val OptString) {
	s.Error = val
}

func (*UserBannerGetInternalServerError) userBannerGetRes() {}

// UserBannerGetNotFound is response for UserBannerGet operation.
type UserBannerGetNotFound struct{}

func (*UserBannerGetNotFound) userBannerGetRes() {}

// JSON-отображение баннера.
type UserBannerGetOK map[string]jx.Raw

func (s *UserBannerGetOK) init() UserBannerGetOK {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

func (*UserBannerGetOK) userBannerGetRes() {}

// UserBannerGetUnauthorized is response for UserBannerGet operation.
type UserBannerGetUnauthorized struct{}

func (*UserBannerGetUnauthorized) userBannerGetRes() {}

type UserToken struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *UserToken) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *UserToken) SetAPIKey(val string) {
	s.APIKey = val
}
