// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// BannerGet implements GET /banner operation.
	//
	// Получение всех баннеров c фильтрацией по фиче и/или
	// тегу.
	//
	// GET /banner
	BannerGet(ctx context.Context, params BannerGetParams) (BannerGetRes, error)
	// BannerIDDelete implements DELETE /banner/{id} operation.
	//
	// Удаление баннера по идентификатору.
	//
	// DELETE /banner/{id}
	BannerIDDelete(ctx context.Context, params BannerIDDeleteParams) (BannerIDDeleteRes, error)
	// BannerIDPatch implements PATCH /banner/{id} operation.
	//
	// Обновление содержимого баннера.
	//
	// PATCH /banner/{id}
	BannerIDPatch(ctx context.Context, req *BannerIDPatchReq, params BannerIDPatchParams) (BannerIDPatchRes, error)
	// BannerPost implements POST /banner operation.
	//
	// Создание нового баннера.
	//
	// POST /banner
	BannerPost(ctx context.Context, req *BannerPostReq) (BannerPostRes, error)
	// UserBannerGet implements GET /user_banner operation.
	//
	// Получение баннера для пользователя.
	//
	// GET /user_banner
	UserBannerGet(ctx context.Context, params UserBannerGetParams) (UserBannerGetRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
